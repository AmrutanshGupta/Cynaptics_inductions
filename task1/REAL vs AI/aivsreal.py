# -*- coding: utf-8 -*-
"""AIvsReal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kCK_P8BWNl3kMKET5g0H6zBJoTTZ_mjs

## Mounting My Dirve for inculding dataset provided on Kaggle **Compitetion**
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Including Libraries for future use"""

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score

train_path = '/content/drive/MyDrive/Data/Train'
test_path = '/content/drive/MyDrive/Data/Test'

IMG_SIZE = (350, 350)
BATCH_SIZE = 64
EPOCHS = 8

LABELS = {'AI': 0, 'Real': 1}

"""## spliting 20% for validation"""

train_dataset = tf.keras.utils.image_dataset_from_directory(
    train_path,
    validation_split=0.2,  # Reserve 20% for validation
    subset="training",
    seed=123,  # Ensures reproducibility
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

val_dataset = tf.keras.utils.image_dataset_from_directory(
    train_path,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

"""# Augmentation to increase the dataset size"""

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    zoom_range=0.2
)

"""# Adding label for judging"""

class_names = train_dataset.class_names
print("Class names:", class_names)

AUTOTUNE = tf.data.AUTOTUNE

train_dataset = train_dataset.map(lambda x, y: (x / 255.0, y))
val_dataset = val_dataset.map(lambda x, y: (x / 255.0, y))

# Optimize dataset performance
train_dataset = train_dataset.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
val_dataset = val_dataset.cache().prefetch(buffer_size=AUTOTUNE)

"""# Appling CNN with 3 Layer and 1 flatten layer with adam optimizer and binary crossentropy loss"""

from tensorflow.keras import layers, models
model = models.Sequential([
    layers.Conv2D(64, (3, 3), activation="relu", input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation="relu"),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(256, (3, 3), activation="relu"),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(256, activation="relu"),
    layers.Dense(1, activation="sigmoid")  # Binary classification
])

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
model.summary()

history = model.fit(
    train_dataset,
    validation_data=val_dataset,
    epochs=10
)

loss, accuracy = model.evaluate(val_dataset)
print(f"Validation Loss: {loss}, Validation Accuracy: {accuracy}")

# Save the model
model.save("real_vs_synthetic_classifier.h5")

"""# A loop to Itrerate through all the images and taking the predictions"""

from pathlib import Path
import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing import image

def classify_image(img_path, model):
    """Classifies an image as 'AI' or 'Real' using the given model."""
    img = image.load_img(img_path, target_size=IMG_SIZE)  # Load and resize image
    img = image.img_to_array(img)  # Convert image to array
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    img /= 255.0  # Normalize pixel values

    prediction = model.predict(img)  # Make prediction
    # print(prediction)
    if prediction[0][0] > 0.5:
        return "Real"  # If probability > 0.5, classify as 'Real'
    else:
        return "AI"  # Otherwise, classify as 'AI'

Id = []
label = []

for i in range(1, 201):
    img_path = Path(test_path) / f"image_{i}.jpg"
    print(img_path)
    if i == 62:
        output = "AI"
    else:
        output = classify_image(img_path, model)  # Call the defined function
    label.append(output)
    Id.append(f"image_{i}")

df = pd.DataFrame({"Id": Id, "Label": label})
df.head()

temp = df['Label']
cnt = 0
for l in temp:
  if l == 'Real':
    cnt = cnt + 1

print(f"real count = {cnt}")

"""## Saving the file in CSV format"""

os.makedirs("/content/drive/MyDrive/cynaptics", exist_ok=True)

# Now save the DataFrame
df.to_csv("/content/drive/MyDrive/cynaptics/output_final.csv" , index = False)